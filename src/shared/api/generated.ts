/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Chat api
 * API for chat
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import { createInstance } from "./api-instance";
import type { ErrorType, BodyType } from "./api-instance";
export type UserControllerGetAllChatsParams = {
  userId: number;
};

export interface AddUserToChatDto {
  /** ChatId */
  chatId: number;
  /** userId */
  userId: number;
}

export interface AddMessageRes {
  /** ID of the chat to which the message was sent */
  chatId: number;
  /** Content of the message */
  content: string;
  /** ID of the added message */
  id: number;
  /** ID of the sender */
  senderId: number;
  /** Timestamp when the message was sent */
  sentAt: string;
  /** DenSLRR */
  username: string;
}

export interface AddMessageDto {
  /** 3434523453 */
  chatId: number;
  /** 34234sdjabjh3v24gv23jhb4kj3bk4hb23gv4j2b3423 */
  encryptedContent: string;
  /** 4234234 */
  senderId: number;
  /** DenSLRR */
  username: string;
}

export interface CreateChatDto {
  /** key */
  encryptedChatKey: string;
  /** Name for chat */
  name: string;
  /** ids users */
  userIds: number[];
}

export interface ChatDtoRes {
  /** Cteated at */
  createdAt: string;
  /** Access token for the user */
  encryptedChatKey: string;
  /** Chat Id */
  id: number;
  /** name */
  name: string;
}

export interface UserDto {
  /** Email of the user */
  email: string;
  /** Unique identifier of the user */
  id: number;
  /** Public key of the user for encryption purposes */
  publicKey: string;
  /** Username of the user */
  username: string;
}

export interface RegistrationDtoRes {
  /** Access token for the user */
  accessToken: string;
  /** user description */
  user: UserDto;
}

export interface RegisterDto {
  /** User email */
  email: string;
  /** User password */
  password: string;
  /** User login */
  username: string;
}

export interface ChatDto {
  [key: string]: unknown;
}

export interface LoginDtoRes {
  /** Access token for the user */
  accessToken: string;
  /** List of chats the user is part of */
  chats: ChatDto[];
  /** Email of the user */
  email: string;
  /** Unique identifier of the user */
  id: number;
  /** Public key of the user for encryption purposes */
  publicKey: string;
  /** Username of the user */
  username: string;
}

export interface LoginDto {
  /** User email */
  email: string;
  /** User password */
  password: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Sign in
 */
export const authControllerLogin = (
  loginDto: MaybeRef<LoginDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  loginDto = unref(loginDto);

  return createInstance<LoginDtoRes>(
    {
      url: `/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginDto,
    },
    options,
  );
};

export const getAuthControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: BodyType<LoginDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<LoginDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: BodyType<LoginDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = BodyType<LoginDto>;
export type AuthControllerLoginMutationError = ErrorType<unknown>;

/**
 * @summary Sign in
 */
export const useAuthControllerLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: BodyType<LoginDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<LoginDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Sign in
 */
export const authControllerRegister = (
  registerDto: MaybeRef<RegisterDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  registerDto = unref(registerDto);

  return createInstance<RegistrationDtoRes>(
    {
      url: `/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerDto,
    },
    options,
  );
};

export const getAuthControllerRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: BodyType<RegisterDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: BodyType<RegisterDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: BodyType<RegisterDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = BodyType<RegisterDto>;
export type AuthControllerRegisterMutationError = ErrorType<unknown>;

/**
 * @summary Sign in
 */
export const useAuthControllerRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: BodyType<RegisterDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: BodyType<RegisterDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerLogout = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/auth/logout`, method: "POST" }, options);
};

export const getAuthControllerLogoutMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    void
  > = () => {
    return authControllerLogout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;

export type AuthControllerLogoutMutationError = ErrorType<unknown>;

export const useAuthControllerLogout = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerGetNewTokens = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/access-token`, method: "POST" },
    options,
  );
};

export const getAuthControllerGetNewTokensMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerGetNewTokens>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerGetNewTokens>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerGetNewTokens>>,
    void
  > = () => {
    return authControllerGetNewTokens(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerGetNewTokensMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetNewTokens>>
>;

export type AuthControllerGetNewTokensMutationError = ErrorType<unknown>;

export const useAuthControllerGetNewTokens = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerGetNewTokens>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof authControllerGetNewTokens>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerGetNewTokensMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Sign in
 */
export const userControllerGetAllChats = (
  params: MaybeRef<UserControllerGetAllChatsParams>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return createInstance<ChatDtoRes>(
    { url: `/user/chats`, method: "GET", params: unref(params), signal },
    options,
  );
};

export const getUserControllerGetAllChatsQueryKey = (
  params: MaybeRef<UserControllerGetAllChatsParams>,
) => {
  return ["user", "chats", ...(params ? [params] : [])] as const;
};

export const getUserControllerGetAllChatsQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetAllChats>>,
  TError = ErrorType<unknown>,
>(
  params: MaybeRef<UserControllerGetAllChatsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetAllChats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getUserControllerGetAllChatsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetAllChats>>
  > = ({ signal }) => userControllerGetAllChats(params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 0,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetAllChats>>,
    TError,
    TData
  >;
};

export type UserControllerGetAllChatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetAllChats>>
>;
export type UserControllerGetAllChatsQueryError = ErrorType<unknown>;

/**
 * @summary Sign in
 */

export function useUserControllerGetAllChats<
  TData = Awaited<ReturnType<typeof userControllerGetAllChats>>,
  TError = ErrorType<unknown>,
>(
  params: MaybeRef<UserControllerGetAllChatsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetAllChats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUserControllerGetAllChatsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

export const userControllerGetUserById = (
  userId: MaybeRef<number>,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  userId = unref(userId);

  return createInstance<void>(
    { url: `/user/${userId}`, method: "GET", signal },
    options,
  );
};

export const getUserControllerGetUserByIdQueryKey = (
  userId: MaybeRef<number>,
) => {
  return ["user", userId] as const;
};

export const getUserControllerGetUserByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetUserById>>,
  TError = ErrorType<unknown>,
>(
  userId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUserById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getUserControllerGetUserByIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetUserById>>
  > = ({ signal }) => userControllerGetUserById(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(userId)),
    staleTime: 0,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetUserById>>,
    TError,
    TData
  >;
};

export type UserControllerGetUserByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetUserById>>
>;
export type UserControllerGetUserByIdQueryError = ErrorType<unknown>;

export function useUserControllerGetUserById<
  TData = Awaited<ReturnType<typeof userControllerGetUserById>>,
  TError = ErrorType<unknown>,
>(
  userId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUserById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUserControllerGetUserByIdQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary Create a new chat
 */
export const chatControllerCreate = (
  createChatDto: MaybeRef<CreateChatDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  createChatDto = unref(createChatDto);

  return createInstance<ChatDtoRes>(
    {
      url: `/chat/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createChatDto,
    },
    options,
  );
};

export const getChatControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatControllerCreate>>,
    TError,
    { data: BodyType<CreateChatDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatControllerCreate>>,
  TError,
  { data: BodyType<CreateChatDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatControllerCreate>>,
    { data: BodyType<CreateChatDto> }
  > = (props) => {
    const { data } = props ?? {};

    return chatControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatControllerCreate>>
>;
export type ChatControllerCreateMutationBody = BodyType<CreateChatDto>;
export type ChatControllerCreateMutationError = ErrorType<unknown>;

/**
 * @summary Create a new chat
 */
export const useChatControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatControllerCreate>>,
    TError,
    { data: BodyType<CreateChatDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof chatControllerCreate>>,
  TError,
  { data: BodyType<CreateChatDto> },
  TContext
> => {
  const mutationOptions = getChatControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Add a message to a chat
 */
export const chatControllerAddMessage = (
  addMessageDto: MaybeRef<AddMessageDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  addMessageDto = unref(addMessageDto);

  return createInstance<AddMessageRes>(
    {
      url: `/chat/message`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addMessageDto,
    },
    options,
  );
};

export const getChatControllerAddMessageMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatControllerAddMessage>>,
    TError,
    { data: BodyType<AddMessageDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatControllerAddMessage>>,
  TError,
  { data: BodyType<AddMessageDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatControllerAddMessage>>,
    { data: BodyType<AddMessageDto> }
  > = (props) => {
    const { data } = props ?? {};

    return chatControllerAddMessage(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatControllerAddMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatControllerAddMessage>>
>;
export type ChatControllerAddMessageMutationBody = BodyType<AddMessageDto>;
export type ChatControllerAddMessageMutationError = ErrorType<unknown>;

/**
 * @summary Add a message to a chat
 */
export const useChatControllerAddMessage = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatControllerAddMessage>>,
    TError,
    { data: BodyType<AddMessageDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof chatControllerAddMessage>>,
  TError,
  { data: BodyType<AddMessageDto> },
  TContext
> => {
  const mutationOptions = getChatControllerAddMessageMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Add user to chat
 */
export const chatControllerAddUserToChat = (
  addUserToChatDto: MaybeRef<AddUserToChatDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  addUserToChatDto = unref(addUserToChatDto);

  return createInstance<ChatDtoRes>(
    {
      url: `/chat/add-user`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addUserToChatDto,
    },
    options,
  );
};

export const getChatControllerAddUserToChatMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatControllerAddUserToChat>>,
    TError,
    { data: BodyType<AddUserToChatDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatControllerAddUserToChat>>,
  TError,
  { data: BodyType<AddUserToChatDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatControllerAddUserToChat>>,
    { data: BodyType<AddUserToChatDto> }
  > = (props) => {
    const { data } = props ?? {};

    return chatControllerAddUserToChat(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatControllerAddUserToChatMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatControllerAddUserToChat>>
>;
export type ChatControllerAddUserToChatMutationBody =
  BodyType<AddUserToChatDto>;
export type ChatControllerAddUserToChatMutationError = ErrorType<unknown>;

/**
 * @summary Add user to chat
 */
export const useChatControllerAddUserToChat = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatControllerAddUserToChat>>,
    TError,
    { data: BodyType<AddUserToChatDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof chatControllerAddUserToChat>>,
  TError,
  { data: BodyType<AddUserToChatDto> },
  TContext
> => {
  const mutationOptions =
    getChatControllerAddUserToChatMutationOptions(options);

  return useMutation(mutationOptions);
};
